МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ 
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмна інженерія»
ЗВІТ
до практичного заняття №2 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Методи рефакторингу коду программного забезпечення»
Виконав: Прийняв:
ст. гр. ПЗПІ-22-7 ст. викладач кафедри ПІ
Лантінов Володимир Олександрович Сокорчук Ігор Петрович
Харків 2024
1 МЕТА
Навчитися ідентифікувати проблеми в коді та використовувати відповідні 
методи рефакторингу для покращення його якості.
2 ЗАВДАННЯ
Студент має вибрати три методи рефакторингу коду з книги Мартіна Фаулера 
«Refactoring. Improving the Design of Existing Code». Він повинен представити приклади 
свого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, 
та продемонструвати застосування обраних методів.
3 ХІД РОБОТИ
Вся робота була виконана та показана на слайдах презентації. Вона містить всі 
обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку А.
ВИСНОВКИ
Ми ознайомилися з основами рефакторингу коду та його роллю в підвищенні 
якості програмного забезпечення. Після застосування кожного методу ми спостерігали 
значне покращення структури та зручності читання коду. Ці зміни також зробили код 
більш зручним для подальшої підтримки та розширення.
Посилання на відео презентацію -
Посилання на GitHub репозиторій с кодом -
ДОДАТОК А
Презентація на тему «Правила оформлення
preencoded.png
Методи рефакторингу коду програмного
забезпечення
Рефакторинг коду є невід'ємною частиною підтримки та розвитку програмних систем. Він дозволяє не тільки покращити
якість коду, а й забезпечити його більш ефективну та стабільну роботу в майбутньому
Виконав студент гр.
ПЗПІ-22-7 Лантінов Володимир
preencoded.png
Вступ до рефакторингу: навіщо та для кого
Навіщо
Рефакторинг коду є важливим процесом покращення
внутрішньої структури коду без зміни його зовнішньої
поведінки. Це дозволяє зробити код більш зрозумілим, 
організованим і легким для модифікацій. Рефакторинг
допомагає усунути дублювання, спростити складні логічні
блоки, поліпшити ефективність і читабельність коду, що
знижує ризик виникнення помилок у майбутньому. 
Залишаючи функціональність незмінною, ми робимо код
більш підтримуваним і готовим до подальших змін.
Для кого
Рефакторинг є важливим інструментом для всіх розробників
програмного забезпечення, особливо тих, хто працює в
командах або на великих проєктах. Це дозволяє створювати
чистіший, ефективніший код, що спрощує його підтримку та
розширення. Крім того, рефакторинг допомагає підвищити
продуктивність розробників, оскільки вони можуть швидше
орієнтуватися в коді, знаходити і виправляти помилки, а
також реалізовувати нові функції. Рефакторинг також
корисний для менеджерів проєктів і тестувальників, 
оскільки якісний код знижує ймовірність багів та покращує
загальну стабільність програми.
preencoded.png
"Change Bidirectional Association to Unidirectional"
1
Початкова ситуація
Два класи мають взаємний доступ до даних.
2
Перехід
Один клас втрачає доступ до даних іншого класу.
3
Результат
Зменшується зв'язок між класами, що спрощує
розробку.
preencoded.png
"Change Bidirectional Association to Unidirectional"
Код до рефакторингу Код після рефакторингу
preencoded.png
"Change Unidirectional Association to Bidirectional"
1
Початкова ситуація
Один клас має доступ до даних іншого.
2
Перехід
Додається зворотній доступ до даних.
3
Результат
Збільшується зв'язок між класами, що дозволяє
ефективніше використовувати код.
preencoded.png
"Change Unidirectional Association to Bidirectional"
Код до рефакторингу Код після рефакторингу
preencoded.png
"Collapse Hierarchy"
Початкова ситуація
Ієрархія класів надмірно
складна.
Перехід
Зменшується кількість
рівнів ієрархії.
Результат
Код стає простішим для розуміння та модифікації.
preencoded.png
"Collapse Hierarchy"
Код до рефакторингу Код після рефакторингу
preencoded.png
Переваги та обмеження
методів рефакторингу
1
Переваги
Покращення
читабельності, 
зменшення складності, 
збільшення
продуктивності.
2
Обмеження
Можливі помилки при
зміні коду, час на
рефакторинг, 
необхідність знати
методи.
preencoded.png
Практичні приклади
застосування
Видалення дублюючого коду
Переміщення однакового коду в
окремі функції або класи.
Вилучення методу
Визначення окремого методу для
часто використовуваної частини
коду.
Зміна структури даних
Перехід від масивів до об'єктів або з
одного типу даних до іншого.
preencoded.png
Підсумки та рекомендації
Рефакторинг - важливий крок для створення якісного
програмного забезпечення. Використовуйте методи рефакторингу
з розсудливості, враховуючи переваги та обмеження.
preencoded.png
Список використаних джерел
• Фаулер Мартін. "Refactoring: Improving the Design of Existing Code«
• Фаулер Мартін. "Refactoring: Improving the Design of Existing Code" 
(2-е видання)
• Мартін Роберт. "Clean Code: A Handbook of Agile Software 
Craftsmanship«
• Хант Ендрю та Томас Девід. "The Pragmatic Programmer"
