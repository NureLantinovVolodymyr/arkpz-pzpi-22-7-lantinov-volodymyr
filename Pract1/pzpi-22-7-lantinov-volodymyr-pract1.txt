МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ 
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмна інженерія»
ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»
Виконав: Прийняв:
ст. гр. ПЗПІ-22-7 ст. викладач кафедри ПІ
Лантінов Володимир Олександрович Сокорчук Ігор Петрович
Харків 2024
1 МЕТА
Навчитися рефакторингу програмного коду, закріпити основні правила 
оформлення коду.
2 ЗАВДАННЯ
Обрати мову програмування для прикладів коду. Створити презентацію на 
тему «Правила оформлення програмного коду».
3 ХІД РОБОТИ
Було обрано мову програмування Smalltalk. У презентації (Додаток А) 
наведено основні рекомендації щодо оформлення програмного коду з описами, а 
також приклад коду до і після застосування цих рекомендацій.
ВИСНОВКИ
Виконання практичної роботи дозволило глибше зрозуміти процес 
рефакторингу в контексті мови Smalltalk. Завдяки застосуванню стандартних 
методів аналізу та рефакторингу вдалося значно покращити якість коду, зробити 
його більш стабільним та підтримуваним. Застосовані методи сприяють 
підвищенню ефективності, зменшенню технічного боргу та покращенню структури 
програмного забезпечення.
Посилання на відео-презентацію
Посилання на GitHub репозиторій с кодом
ДОДАТОК А
Презентація на тему «Правила оформлення програмного коду».
preencoded.png
Аналіз та рефакторинг 
коду програмного 
забезпечення для мови 
Smalltalk
Ця презентація присвячена аналізу та рефакторингу коду 
програмного забезпечення, написаного на мові Smalltalk. Ми 
розглянемо ключові аспекти цього процесу, висвітлимо важливість 
аналізу та рефакторингу, а також ознайомимося з популярними 
методами і техніками.
Підготував ст. гр. ПЗПІ-22-7
Володимир Лантінов
preencoded.png
Введення до мови Smalltalk та її 
особливості
Об'єктноорієнтована мова
Smalltalk - це об'єктноорієнтована мова 
програмування, що 
наголошує на концепції 
об'єктів та їх взаємодії.
Динамічне 
типізування
Мова має динамічне 
типізування, що дозволяє 
уникати багато часу на 
вказівку типів даних.
Простий 
синтаксис
Smalltalk відрізняється 
простим та лаконічним 
синтаксисом, що робить її 
легкою для вивчення.
Висока гнучкість
Мова відома своєю 
гнучкістю та можливістю 
адаптації до різних задач 
програмування.
preencoded.png
Важливість аналізу коду в 
процесі розробки
1 Виявлення помилок
Аналіз коду допомагає 
виявити помилки, які можуть 
бути приховані в коді.
2 Покращення якості
Аналіз допомагає покращити 
якість коду, зробивши його 
більш надійним та 
ефективним.
3
Збільшення 
читабельності
Аналіз коду може покращити 
його читабельність, 
зробивши його більш 
зрозумілим для інших 
розробників.
4 Зменшення 
технічного боргу
Аналіз може допомогти 
зменшити технічний борг, 
виявивши проблемні ділянки 
коду.
preencoded.png
Методи аналізу коду для 
мови Smalltalk
Статичний аналіз
Статичний аналіз 
здійснюється без виконання 
коду. Він аналізує структуру 
коду, шукає потенційні 
проблеми.
Динамічний аналіз
Динамічний аналіз 
здійснюється під час 
виконання коду. Він дозволяє 
виявити помилки під час 
роботи програми.
Профілювання
Профілювання коду допомагає 
визначити вузькі місця та 
оптимізувати продуктивність 
програми.
Тестування
Тестування коду дозволяє 
перевірити, чи відповідає код 
вимогам та очікуванням.
preencoded.png
Приклади коду
Статичний аналіз Динамічний аналіз
Профілювання Тестування
preencoded.png
Ідентифікація проблемних 
ділянок коду
Порушення стандартів
Відхилення від стандартів кодування 
можуть призвести до 
непередбачуваної поведінки.
Потенційні помилки
Аналіз коду допомагає виявити 
потенційні помилки, які можуть 
призвести до збоїв.
Незрозумілий код
Код, який важко зрозуміти, може бути 
складним для налагодження та 
розширення.
Проблеми продуктивності
Профілювання коду допомагає 
виявити вузькі місця, які знижують 
швидкість виконання.
preencoded.png
Техніки рефакторингу коду 
Smalltalk
1
Екстракція методу
Витягування коду з одного методу в окремий метод для покращення 
організації.
2
Перейменування
Зміна назв змінних, методів та класів для підвищення читабельності.
3
Вилучення змінних
Вилучення змінних з глобальної області видимості для підвищення локалізації.
4
Введення інтерфейсів
Створення інтерфейсів для абстрагування деталей реалізації класів.
preencoded.png
Приклади коду
Екстракція методу Перейменування змінних
Вилучення змінних
Введення інтерфейсів
preencoded.png
Покращення читабельності та 
підтримуваності коду
Використання стандартів
Дотримання стандартів кодування робить код більш зрозумілим.
Документування коду
Коментарі в коді пояснюють логіку та допомагають зрозуміти код.
Тестування коду
Написання тестів допомагає гарантувати правильність коду.
Використання інструментів
Існує багато інструментів для покращення читабельності та підтримуваності коду.
preencoded.png
Висновки та 
рекомендації
Аналіз та рефакторинг коду - це ключові кроки для створення 
якісного програмного забезпечення. Регулярний аналіз коду 
допомагає покращити якість коду, зменшити кількість помилок та 
підвищити його читабельність. Рефакторинг коду робить його більш 
підтримуваним та адаптованим до змін.
preencoded.png
Список використаних джерел:
• Фаулер Мартін. "Refactoring: Improving the Design of Existing 
Code«
• Фаулер Мартін. "Refactoring: Improving the Design of Existing 
Code" (2-е видання)
• Мартін Роберт. "Clean Code: A Handbook of Agile Software 
Craftsmanship«
• Хант Ендрю та Томас Девід. "The Pragmatic Programmer
