Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
Звіт
З лабораторної роботи №3
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ 
АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ 
СИСТЕМИ »
Виконавець:
ст. гр. ПЗПІ-22-7 Лантінов В. О.
Перевірив:
ст. викладач кафедри ПІ Сокорчук І. П.
Харків 2024
1 МЕТА РОБОТИ
Метою роботи є розробка бізнес-логіки та функцій адміністрування 
для серверної частини програмної системи.
2 ХІД РОБОТИ
У ході виконання лабораторної роботи було реалізовано низку функцій, які 
охоплюють основні аспекти адміністрування, управління транспортними 
засобами та маршрутизації. Опис інженерних рішень включає:
Управління користувачами:
• Отримання всіх користувачів з бази даних.
• Видалення користувачів за унікальним ідентифікатором (ID).
Управління транспортними засобами:
• Додавання нових транспортних засобів до системи із збереженням 
їхніх даних у базу.
• Отримання списку всіх транспортних засобів, включаючи модель, 
реєстраційний номер, рік випуску та статус.
• Оновлення даних про транспортний засіб (зміна статусу, оновлення 
моделі, року випуску тощо).
• Видалення транспортного засобу за його унікальним ідентифікатором 
(ID).
Управління маршрутами:
• Планування нових маршрутів із зазначенням початкової та кінцевої 
точки, дистанції та транспортного засобу, який виконує маршрут.
• Отримання всіх маршрутів із бази даних.
• Видалення маршрутів за унікальним ідентифікатором.
Фрагменти програмного коду
Функції роботи з транспортними засобами:
1 router.get("/vehicles", adminController.getVehicles);
2 router.post("/vehicles", adminController.addVehicle);
3 router.put("/vehicles/:id", adminController.updateVehicle);
4 router.delete("/vehicles/:id", adminController.deleteVehicle);
Код програмної реалізації маршрутів наведено у додатку В.
Функції роботи з користувачами:
1 async getUsers(req, res, next) {
2 try {
3 const users = await userService.getAllUsers();
4 return res.json(users);
5 } catch (e) {
6 next(e);
7 }
8 }
9 async deleteUser(req, res, next) {
10 try {
11 const { id } = req.params;
12 await User.findByIdAndDelete(id);
13 res.json({ message: "User deleted successfully" });
14 } catch (e) {
15 next(e);
16 }
17 }
Загальний висновок
У результаті виконання роботи було розроблено серверну частину 
програмної системи, що включає функціонал для адміністрування користувачів, 
управління транспортними засобами та планування маршрутів. Реалізовані 
функції забезпечують ефективне управління даними через API з використанням 
сучасних підходів до розробки на платформі Node.js з використанням MongoDB.
3 ВИСНОВКИ
Під час виконання лабораторної роботи було реалізовано кілька функцій, 
що охоплюють основні аспекти адміністрування, управління транспортними 
засобами та маршрутами. Зокрема, були розроблені рішення для ефективного 
управління користувачами, транспортними засобами та маршрутами, що значно 
підвищують функціональність та зручність використання системи.
Управління користувачами реалізовано через можливість отримання 
списку всіх користувачів з бази даних, а також видалення користувачів за 
унікальним ідентифікатором (ID). Це дозволяє адміністраторам системи 
ефективно контролювати доступ до системи та підтримувати її безпеку.
Управління транспортними засобами включає функції додавання нових 
транспортних засобів, оновлення їхніх даних, перегляду списку всіх доступних 
транспортних засобів та їх видалення. Такий функціонал забезпечує гнучке та 
централізоване адміністрування ресурсів системи.
Управління маршрутами реалізовано через можливість створення нових 
маршрутів, перегляду існуючих та видалення маршрутів за унікальним 
ідентифікатором. Це дозволяє оптимізувати логістику та полегшити 
адміністрування системи.
Результати роботи підтверджують доцільність застосування сучасних 
підходів до розробки серверних систем із використанням Node.js та MongoDB, 
що забезпечують масштабованість і надійність програмного забезпечення.
Посилання на ютуб -
ДОДАТОК А
UML діаграма отримання всіх користувачів
Рисунок А.1 – UML отримання всіх користувачів
Діаграма описує процес отримання списку користувачів, починаючи 
від клієнта та закінчуючи поверненням результату з бази даних.
ДОДАТОК Б
UML діаграми активності
Рисунок Б.1 – UML діаграма активності отримання всіх користувачів
Діаграма на рис. Б.1 показує процес отримання всіх користувачів в системі.
Рисунок Б.2 – UML діаграма активності додавання транспортного засобу
Діаграма на рис. Б.2 описує процес додавання транспортного засобу в 
систему.
Рисунок Б.3 – UML діаграма активності оновлення транспортного засобу
Діаграма на рис. Б.3 демонструє логіку оновлення інформації про 
транспортний засіб.
Рисунок Б.4 – UML діаграма активності видалення транспортного засобу
Діаграма на рис. Б.4 показує процес видалення транспортного засобу з 
системи.
Рисунок Б.5 – UML Діаграма активності додавання маршруту
Діаграма на рис. Б.5 ілюструє процес додавання нового маршруту в 
систему.
ДОДАТОК В
Код з програмної реалізації маршрутів для транспортних засобів (із
серверної частини)
1. exports.getAllVehicles = async (req, res) => {
2. try {
3. const vehicles = await Vehicle.find();
4. res.status(200).json(vehicles);
5. } catch (error) {
6. res.status(500).json({ message: error.message });
7. }
8. };
9. exports.addVehicle = async (req, res) => {
10. try {
11. const vehicle = new Vehicle(req.body);
12. await vehicle.save();
13. res.status(201).json(vehicle);
14. } catch (error) {
15. res.status(400).json({ message: error.message });
16. }
17. };
18. exports.updateVehicle = async (req, res) => {
19. try {
20. const { id } = req.params;
21. const vehicle = await Vehicle.findByIdAndUpdate(id, req.body, {
22. new: true,
23. });
24. if (!vehicle) {
25. return res.status(404).json({ message: "Vehicle not found" });
26. }
27. res.status(200).json(vehicle);
28. } catch (error) {
29. res.status(400).json({ message: error.message });
30. }
31. };
32. exports.deleteVehicle = async (req, res) => {
33. try {
34. const { id } = req.params;
35. const vehicle = await Vehicle.findByIdAndDelete(id);
36. if (!vehicle) {
37. return res.status(404).json({ message: "Vehicle not found" });
38. }
39. res.status(200).json({ message: "Vehicle deleted" });
40. } catch (error) {
41. res.status(500).json({ message: error.message });
42. }
43. }
44 router.delete(
45 "/vehicles/:id",
46 adminMiddleware,
47 vehicleController.deleteVehicle
48 );
49
