Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №5
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»

Виконавець:
ст. гр. ПЗПІ-22-7	Лантінов В. О.

Перевірив:
ст. викладач кафедри ПІ	Сокорчук І. П.



















Харків 2024
 
1	Мета роботи:

Розгорнути реалізовану програмну систему, перевірити та налаштувати роботу розгорнутої програмної системи.

2	Хід роботи:


2.1	Опис розгорнутої програмної системи

Серверна частина:
•	Мова програмування: Серверна частина розроблена на мові JavaScript.
•	Фреймворк: Для ефективної розробки веб-додатків і REST API використовується Node.js разом із Express.js. Цей стек технологій забезпечує підтримку високоефективного обміну даними, що необхідно для моніторингу стану IoT-пристроїв.
•	База даних: Для зберігання та управління даними, такими як температурні показники, тиск у шинах і координати GPS, застосовується MongoDB. Моделі та схеми для роботи з базою даних реалізовані за допомогою бібліотеки Mongoose, що дозволяє зручно взаємодіяти з MongoDB.
•	Контролери та маршрутизація: Для обробки HTTP-запитів реалізовані контролери, що забезпечують ефективну маршрутизацію запитів та взаємодію з основними ресурсами системи, такими як методи GET, POST, PUT і DELETE.
•	Міграції та оновлення: Для ініціалізації бази даних та додавання початкових даних використовуються скрипти міграцій, що дозволяють автоматизувати процес налаштування бази.
Функціональність: Система забезпечує збір, обробку та аналіз даних про стан IoT-пристроїв, зокрема температуру, тиск у шинах і геолокацію. Додатково реалізовано функціонал для відправлення цих даних на MQTT-брокер, що дозволяє передавати їх на інші системи для подальшого оброблення.
Інтеграція з IoT: Система інтегрована з IoT-пристроями через MQTT-брокер. Ця інтеграція дозволяє отримувати дані з датчиків транспортних засобів в реальному часі та здійснювати обробку цих даних на сервері. Для обміну даними між IoT-пристроєм та сервером використовується MQTT-протокол, що гарантує стабільність і ефективність комунікацій.

2.2	Опис розгортання

Серверна частина:
1.	Інсталяція залежностей: Всі необхідні залежності були встановлені через команду npm install.
2.	Налаштування середовища: У файлі .env були налаштовані змінні середовища, включаючи підключення до MQTT-сервера для обміну даними.
3.	Запуск сервера: Сервер було запущено за допомогою команди npm start. Для перевірки працездатності використовувались запити до API за допомогою Postman.
4.	Перевірка функціональності: 
•	Запити до API обробляються без помилок.
•	Дані успішно зберігаються в базі даних для подальшого аналізу.
•	Система коректно передає та отримує дані через MQTT з IoT-пристроїв.
Інтеграція IoT:
1.	Підключення ESP32 до Wi-Fi та налаштування передачі даних на сервер: Мікроконтролер ESP32 був налаштований для підключення до Wi-Fi та передачі даних на сервер через MQTT.
2.	Передача зібраних даних через MQTT до сервера: Дані, отримані від сенсорів, передаються через MQTT на сервер для подальшої обробки.
3.	Обробка та зберігання даних: Сервер успішно обробляє отримані дані та зберігає їх у базі даних MongoDB для подальшого аналізу.
Використані інструменти та технології:
•	Node.js: Використовувався для розробки серверної частини.
•	MongoDB: Використовувалася для зберігання даних.
•	Postman: Інструмент для тестування API.
•	MQTT: Використовувався для з'єднання IoT-пристроїв з сервером.
•	Visual Studio Code: Використовувався для розробки та налагодження коду.
•	GitHub: Використовувався для керування версіями коду.


3	Висновок:

Програмна система успішно розгорнута та протестована в локальному середовищі, всі її компоненти працюють без помилок. Основні функціональні можливості системи включають:
•	Обробка даних від IoT пристроїв.
•	Генерація та своєчасне надсилання нагадувань користувачам.
•	Зберігання даних у базі даних MongoDB, що забезпечує їх доступність для подальшого аналізу.
У майбутньому є можливість розгортання системи на хмарному сервері, що дозволить забезпечити масштабованість та покращену доступність.
Посилання на відео - 
